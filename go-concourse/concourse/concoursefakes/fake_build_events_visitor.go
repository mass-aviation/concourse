// Code generated by counterfeiter. DO NOT EDIT.
package concoursefakes

import (
	"sync"

	"github.com/concourse/concourse/atc"
	"github.com/concourse/concourse/go-concourse/concourse"
)

type FakeBuildEventsVisitor struct {
	VisitEventStub        func(atc.Event) error
	visitEventMutex       sync.RWMutex
	visitEventArgsForCall []struct {
		arg1 atc.Event
	}
	visitEventReturns struct {
		result1 error
	}
	visitEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildEventsVisitor) VisitEvent(arg1 atc.Event) error {
	fake.visitEventMutex.Lock()
	ret, specificReturn := fake.visitEventReturnsOnCall[len(fake.visitEventArgsForCall)]
	fake.visitEventArgsForCall = append(fake.visitEventArgsForCall, struct {
		arg1 atc.Event
	}{arg1})
	fake.recordInvocation("VisitEvent", []interface{}{arg1})
	fake.visitEventMutex.Unlock()
	if fake.VisitEventStub != nil {
		return fake.VisitEventStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.visitEventReturns
	return fakeReturns.result1
}

func (fake *FakeBuildEventsVisitor) VisitEventCallCount() int {
	fake.visitEventMutex.RLock()
	defer fake.visitEventMutex.RUnlock()
	return len(fake.visitEventArgsForCall)
}

func (fake *FakeBuildEventsVisitor) VisitEventCalls(stub func(atc.Event) error) {
	fake.visitEventMutex.Lock()
	defer fake.visitEventMutex.Unlock()
	fake.VisitEventStub = stub
}

func (fake *FakeBuildEventsVisitor) VisitEventArgsForCall(i int) atc.Event {
	fake.visitEventMutex.RLock()
	defer fake.visitEventMutex.RUnlock()
	argsForCall := fake.visitEventArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBuildEventsVisitor) VisitEventReturns(result1 error) {
	fake.visitEventMutex.Lock()
	defer fake.visitEventMutex.Unlock()
	fake.VisitEventStub = nil
	fake.visitEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildEventsVisitor) VisitEventReturnsOnCall(i int, result1 error) {
	fake.visitEventMutex.Lock()
	defer fake.visitEventMutex.Unlock()
	fake.VisitEventStub = nil
	if fake.visitEventReturnsOnCall == nil {
		fake.visitEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.visitEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuildEventsVisitor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.visitEventMutex.RLock()
	defer fake.visitEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBuildEventsVisitor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ concourse.BuildEventsVisitor = new(FakeBuildEventsVisitor)
