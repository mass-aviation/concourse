// Code generated by counterfeiter. DO NOT EDIT.
package concoursefakes

import (
	"sync"

	"github.com/concourse/concourse/atc"
	"github.com/concourse/concourse/atc/api/jobserver"
	"github.com/concourse/concourse/go-concourse/concourse"
)

type FakeJobsEventsVisitor struct {
	VisitInitialEventStub        func([]atc.Job) error
	visitInitialEventMutex       sync.RWMutex
	visitInitialEventArgsForCall []struct {
		arg1 []atc.Job
	}
	visitInitialEventReturns struct {
		result1 error
	}
	visitInitialEventReturnsOnCall map[int]struct {
		result1 error
	}
	VisitPatchEventStub        func([]jobserver.JobWatchEvent) error
	visitPatchEventMutex       sync.RWMutex
	visitPatchEventArgsForCall []struct {
		arg1 []jobserver.JobWatchEvent
	}
	visitPatchEventReturns struct {
		result1 error
	}
	visitPatchEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobsEventsVisitor) VisitInitialEvent(arg1 []atc.Job) error {
	var arg1Copy []atc.Job
	if arg1 != nil {
		arg1Copy = make([]atc.Job, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.visitInitialEventMutex.Lock()
	ret, specificReturn := fake.visitInitialEventReturnsOnCall[len(fake.visitInitialEventArgsForCall)]
	fake.visitInitialEventArgsForCall = append(fake.visitInitialEventArgsForCall, struct {
		arg1 []atc.Job
	}{arg1Copy})
	fake.recordInvocation("VisitInitialEvent", []interface{}{arg1Copy})
	fake.visitInitialEventMutex.Unlock()
	if fake.VisitInitialEventStub != nil {
		return fake.VisitInitialEventStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.visitInitialEventReturns
	return fakeReturns.result1
}

func (fake *FakeJobsEventsVisitor) VisitInitialEventCallCount() int {
	fake.visitInitialEventMutex.RLock()
	defer fake.visitInitialEventMutex.RUnlock()
	return len(fake.visitInitialEventArgsForCall)
}

func (fake *FakeJobsEventsVisitor) VisitInitialEventCalls(stub func([]atc.Job) error) {
	fake.visitInitialEventMutex.Lock()
	defer fake.visitInitialEventMutex.Unlock()
	fake.VisitInitialEventStub = stub
}

func (fake *FakeJobsEventsVisitor) VisitInitialEventArgsForCall(i int) []atc.Job {
	fake.visitInitialEventMutex.RLock()
	defer fake.visitInitialEventMutex.RUnlock()
	argsForCall := fake.visitInitialEventArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJobsEventsVisitor) VisitInitialEventReturns(result1 error) {
	fake.visitInitialEventMutex.Lock()
	defer fake.visitInitialEventMutex.Unlock()
	fake.VisitInitialEventStub = nil
	fake.visitInitialEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobsEventsVisitor) VisitInitialEventReturnsOnCall(i int, result1 error) {
	fake.visitInitialEventMutex.Lock()
	defer fake.visitInitialEventMutex.Unlock()
	fake.VisitInitialEventStub = nil
	if fake.visitInitialEventReturnsOnCall == nil {
		fake.visitInitialEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.visitInitialEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobsEventsVisitor) VisitPatchEvent(arg1 []jobserver.JobWatchEvent) error {
	var arg1Copy []jobserver.JobWatchEvent
	if arg1 != nil {
		arg1Copy = make([]jobserver.JobWatchEvent, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.visitPatchEventMutex.Lock()
	ret, specificReturn := fake.visitPatchEventReturnsOnCall[len(fake.visitPatchEventArgsForCall)]
	fake.visitPatchEventArgsForCall = append(fake.visitPatchEventArgsForCall, struct {
		arg1 []jobserver.JobWatchEvent
	}{arg1Copy})
	fake.recordInvocation("VisitPatchEvent", []interface{}{arg1Copy})
	fake.visitPatchEventMutex.Unlock()
	if fake.VisitPatchEventStub != nil {
		return fake.VisitPatchEventStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.visitPatchEventReturns
	return fakeReturns.result1
}

func (fake *FakeJobsEventsVisitor) VisitPatchEventCallCount() int {
	fake.visitPatchEventMutex.RLock()
	defer fake.visitPatchEventMutex.RUnlock()
	return len(fake.visitPatchEventArgsForCall)
}

func (fake *FakeJobsEventsVisitor) VisitPatchEventCalls(stub func([]jobserver.JobWatchEvent) error) {
	fake.visitPatchEventMutex.Lock()
	defer fake.visitPatchEventMutex.Unlock()
	fake.VisitPatchEventStub = stub
}

func (fake *FakeJobsEventsVisitor) VisitPatchEventArgsForCall(i int) []jobserver.JobWatchEvent {
	fake.visitPatchEventMutex.RLock()
	defer fake.visitPatchEventMutex.RUnlock()
	argsForCall := fake.visitPatchEventArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJobsEventsVisitor) VisitPatchEventReturns(result1 error) {
	fake.visitPatchEventMutex.Lock()
	defer fake.visitPatchEventMutex.Unlock()
	fake.VisitPatchEventStub = nil
	fake.visitPatchEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobsEventsVisitor) VisitPatchEventReturnsOnCall(i int, result1 error) {
	fake.visitPatchEventMutex.Lock()
	defer fake.visitPatchEventMutex.Unlock()
	fake.VisitPatchEventStub = nil
	if fake.visitPatchEventReturnsOnCall == nil {
		fake.visitPatchEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.visitPatchEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeJobsEventsVisitor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.visitInitialEventMutex.RLock()
	defer fake.visitInitialEventMutex.RUnlock()
	fake.visitPatchEventMutex.RLock()
	defer fake.visitPatchEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJobsEventsVisitor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ concourse.JobsEventsVisitor = new(FakeJobsEventsVisitor)
